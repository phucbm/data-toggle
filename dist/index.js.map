{"version":3,"sources":["../src/index.ts"],"names":["createDataToggle","config","options","isDestroyed","boundHandlers","log","args","debounce","func","delay","timeoutId","event","target","preservedEvent","validateElements","findToggleTarget","toggleElement","elementSelector","targetElement","defaultElement","handleToggleClick","className","shouldPreventDefault","toggleTarget","wasActive","toggleEvent","bindEvents","toggleElements","clickHandler","element","existingHandler","error","unbindEvents","handler"],"mappings":"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","file":"index.js","sourcesContent":["interface DataToggleConfig {\n    /** CSS selector for toggle elements. Defaults to '[data-toggle]' */\n    selector?: string;\n    /** Data attribute name for toggle. Defaults to 'data-toggle' */\n    toggleAttribute?: string;\n    /** Data attribute name for element selector. Defaults to 'data-toggle-element' */\n    elementAttribute?: string;\n    /** Default target element for toggles. Defaults to document.documentElement (html) */\n    defaultTarget?: Element;\n    /** Default element selector fallback */\n    defaultElementSelector?: string;\n    /** Whether to prevent default action on click. Defaults to 'auto' */\n    preventDefault?: boolean | 'auto';\n    /** Enable debug logging */\n    debug?: boolean;\n    /** Debounce delay in milliseconds. Defaults to 0 (no debouncing) */\n    debounceDelay?: number;\n}\n\ninterface DataToggleInstance {\n    /** Destroy the toggle instance and remove ALL event listeners for this instance */\n    destroy(): void;\n\n    /** Programmatically toggle a class on specific element by its data-toggle value */\n    toggle(className: string, elementSelector?: string): void;\n\n    /** Check if a class is currently active for a specific data-toggle element */\n    isActive(className: string, elementSelector?: string): boolean;\n\n    /** Refresh the instance - use when DOM changes and new [data-toggle] elements are added */\n    refresh(): void;\n}\n\n/**\n * Creates a new data toggle instance\n * @param config - Configuration options\n * @returns DataToggleInstance with control methods\n */\nexport const createDataToggle = (config: DataToggleConfig = {}): DataToggleInstance => {\n    const options: Required<DataToggleConfig> = {\n        selector: '[data-toggle]',\n        toggleAttribute: 'data-toggle',\n        elementAttribute: 'data-toggle-element',\n        defaultTarget: document.documentElement,\n        defaultElementSelector: '',\n        preventDefault: 'auto',\n        debug: false,\n        debounceDelay: 0,\n        ...config\n    };\n\n    // Update selector if custom toggle attribute is provided\n    if (config.toggleAttribute && !config.selector) {\n        options.selector = `[${config.toggleAttribute}]`;\n    }\n\n    let isDestroyed = false;\n    const boundHandlers = new WeakMap<Element, EventListener>();\n\n    /**\n     * Log debug messages if debug mode is enabled\n     */\n    const log = (...args: any[]) => {\n        if (options.debug) {\n            console.log('[DataToggle]', ...args);\n        }\n    };\n\n    /**\n     * Simple debounce implementation\n     */\n    const debounce = (func: Function, delay: number) => {\n        let timeoutId: number;\n        return (event: Event) => {\n            // Preserve the event and target for later use\n            const target = event.currentTarget as Element;\n            const preservedEvent = {\n                ...event,\n                currentTarget: target,\n                preventDefault: () => event.preventDefault()\n            };\n\n            clearTimeout(timeoutId);\n            timeoutId = window.setTimeout(() => {\n                func(preservedEvent);\n            }, delay);\n        };\n    };\n\n    /**\n     * Validate that required elements exist\n     */\n    const validateElements = (): boolean => {\n        if (!options.defaultTarget) {\n            console.error('[DataToggle] Default target element not found');\n            return false;\n        }\n        return true;\n    };\n\n    /**\n     * Find the target element for a specific toggle element\n     */\n    const findToggleTarget = (toggleElement: Element): Element | null => {\n        // Check for element selector attribute\n        const elementSelector = toggleElement.getAttribute(options.elementAttribute);\n        if (elementSelector) {\n            const targetElement = document.querySelector(elementSelector);\n            if (targetElement) {\n                return targetElement;\n            } else {\n                console.warn(`[DataToggle] Target element not found for selector: ${elementSelector}`);\n                return null;\n            }\n        }\n\n        // Use default element selector from config\n        if (options.defaultElementSelector) {\n            const defaultElement = document.querySelector(options.defaultElementSelector);\n            if (defaultElement) {\n                return defaultElement;\n            }\n        }\n\n        // Final fallback to default target\n        return options.defaultTarget;\n    };\n\n    /**\n     * Handle toggle click events\n     */\n    const handleToggleClick = (event: Event) => {\n        if (isDestroyed) return;\n\n        const target = event.currentTarget as Element;\n        if (!target) {\n            log('No current target found in event');\n            return;\n        }\n\n        const className = target.getAttribute(options.toggleAttribute);\n\n        if (!className?.trim()) {\n            log(`No class name found in ${options.toggleAttribute} attribute`);\n            return;\n        }\n\n        // Determine if we should prevent default\n        let shouldPreventDefault = options.preventDefault;\n        if (shouldPreventDefault === 'auto') {\n            // Prevent default for links and buttons, but not for other elements\n            shouldPreventDefault = target.tagName === 'A' || target.tagName === 'BUTTON';\n        }\n\n        if (shouldPreventDefault) {\n            event.preventDefault();\n        }\n\n        // Find the target element to toggle\n        const toggleTarget = findToggleTarget(target);\n        if (!toggleTarget) {\n            return;\n        }\n\n        // Perform the toggle\n        const wasActive = toggleTarget.classList.contains(className);\n        toggleTarget.classList.toggle(className);\n\n        log(`Toggled class \"${className}\" on`, toggleTarget, wasActive ? 'OFF' : 'ON');\n\n        // Dispatch custom event\n        const toggleEvent = new CustomEvent('datatoggle', {\n            detail: {\n                className,\n                target: toggleTarget,\n                trigger: target,\n                active: !wasActive\n            }\n        });\n        document.dispatchEvent(toggleEvent);\n    };\n\n    /**\n     * Add event listeners to toggle elements\n     */\n    const bindEvents = () => {\n        if (!validateElements()) return;\n\n        try {\n            const toggleElements = document.querySelectorAll(options.selector);\n\n            if (toggleElements.length === 0) {\n                log(`No toggle elements found with selector: ${options.selector}`);\n                return;\n            }\n\n            const clickHandler = options.debounceDelay > 0\n                ? debounce(handleToggleClick, options.debounceDelay)\n                : handleToggleClick;\n\n            toggleElements.forEach(element => {\n                // Remove existing handler if any\n                const existingHandler = boundHandlers.get(element);\n                if (existingHandler) {\n                    element.removeEventListener('click', existingHandler);\n                }\n\n                // Add new handler\n                element.addEventListener('click', clickHandler);\n                boundHandlers.set(element, clickHandler);\n            });\n\n            log(`Bound events to ${toggleElements.length} elements`);\n        } catch (error) {\n            console.error('[DataToggle] Error binding events:', error);\n        }\n    };\n\n    /**\n     * Remove all event listeners\n     */\n    const unbindEvents = () => {\n        try {\n            const toggleElements = document.querySelectorAll(options.selector);\n            toggleElements.forEach(element => {\n                const handler = boundHandlers.get(element);\n                if (handler) {\n                    element.removeEventListener('click', handler);\n                    boundHandlers.delete(element);\n                }\n            });\n            log('Unbound all events');\n        } catch (error) {\n            console.error('[DataToggle] Error unbinding events:', error);\n        }\n    };\n\n    // Initialize\n    bindEvents();\n\n    // Return the instance API\n    return {\n        destroy() {\n            if (isDestroyed) {\n                log('Instance already destroyed');\n                return;\n            }\n\n            unbindEvents(); // Removes ALL event listeners for this instance\n            isDestroyed = true;\n            log('Instance destroyed - all event listeners removed');\n        },\n\n        toggle(className: string, elementSelector?: string) {\n            if (isDestroyed) {\n                console.warn('[DataToggle] Cannot toggle on destroyed instance');\n                return;\n            }\n\n            if (!className?.trim()) {\n                console.warn('[DataToggle] Invalid class name provided');\n                return;\n            }\n\n            let targetElement: Element;\n\n            if (elementSelector) {\n                // Find target by selector\n                const element = document.querySelector(elementSelector);\n                if (!element) {\n                    console.warn(`[DataToggle] Element not found for selector: ${elementSelector}`);\n                    return;\n                }\n                targetElement = element;\n            } else {\n                // Use default target\n                targetElement = options.defaultTarget;\n            }\n\n            const wasActive = targetElement.classList.contains(className);\n            targetElement.classList.toggle(className);\n\n            log(`Programmatically toggled \"${className}\" on`, targetElement, wasActive ? 'OFF' : 'ON');\n\n            // Dispatch custom event\n            const toggleEvent = new CustomEvent('datatoggle', {\n                detail: {\n                    className,\n                    target: targetElement,\n                    trigger: null, // No trigger for programmatic toggles\n                    active: !wasActive\n                }\n            });\n            document.dispatchEvent(toggleEvent);\n        },\n\n        isActive(className: string, elementSelector?: string): boolean {\n            if (isDestroyed) {\n                console.warn('[DataToggle] Cannot check state on destroyed instance');\n                return false;\n            }\n\n            let targetElement: Element;\n\n            if (elementSelector) {\n                // Find target by selector\n                const element = document.querySelector(elementSelector);\n                if (!element) {\n                    console.warn(`[DataToggle] Element not found for selector: ${elementSelector}`);\n                    return false;\n                }\n                targetElement = element;\n            } else {\n                // Use default target\n                targetElement = options.defaultTarget;\n            }\n\n            return targetElement.classList.contains(className);\n        },\n\n        refresh() {\n            if (isDestroyed) {\n                console.warn('[DataToggle] Cannot refresh destroyed instance');\n                return;\n            }\n\n            log('Refreshing instance - rescanning for new toggle elements');\n            unbindEvents();\n            bindEvents();\n        }\n    };\n};"]}